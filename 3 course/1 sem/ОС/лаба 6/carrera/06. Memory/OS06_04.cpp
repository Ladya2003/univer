#include <iostream>
#include <Windows.h>
using namespace std;

void sh(HANDLE pheap)
{
    PROCESS_HEAP_ENTRY phe;
    phe.lpData = NULL;
    DWORD size = 0;
    while (HeapWalk(pheap, &phe))
    {
        size += phe.cbData;
        if (phe.wFlags & PROCESS_HEAP_UNCOMMITTED_RANGE)
        {
            cout << "-- address = " << hex << phe.lpData
                << ", size = " << dec << phe.cbData << " U" << "\n";;// нераспределенная область
        }
        else if (phe.wFlags & PROCESS_HEAP_ENTRY_BUSY)
        {
            cout << "-- address = " << hex << phe.lpData
                << ", size = " << dec << phe.cbData << " B" << "\n";;// распределенная область
        }

    }
    std::cout << "size of the heap: " << size << endl;
    std::cout << "-----------------------------------\n\n";
}

int main()
{
    HANDLE pheap = GetProcessHeap();

    sh(pheap);
    {
        int size = 300000;
        int* m = new int[size];
        cout << "-- m = " << hex << m << " \n\n";
    }
    sh(pheap);
    system("pause");
}





























//#include <iostream>
//#include <Windows.h>
//using namespace std;
//
//void HeapInfo(HANDLE pheap)
//{
//    PROCESS_HEAP_ENTRY phe;
//    phe.lpData = NULL;
//    while (HeapWalk(pheap, &phe))
//    {
//        cout << "-- address = " << hex << phe.lpData
//            << ", size = " << dec << phe.cbData
//            << ((phe.wFlags & PROCESS_HEAP_REGION) ? " R" : "") 
//            << ((phe.wFlags & PROCESS_HEAP_UNCOMMITTED_RANGE) ? " U" : "") 
//            << ((phe.wFlags & PROCESS_HEAP_ENTRY_BUSY) ? " B" : "") 
//            << "\n";
//    }
//    std::cout << "-----------------------------------\n\n";
//}
//
//int main()
//{
//    HANDLE pheap = GetProcessHeap();
//    HANDLE heap = HeapCreate(HEAP_NO_SERIALIZE | HEAP_ZERO_MEMORY, 4096, 0);
//
//    HeapInfo(heap);
//
//    int size = 300000;
//    int* m = new int[size];
//    //cout << "adress = " << hex << m << ", size = " << dec << size << " \n\n";
//
//    int* mm = (int*)HeapAlloc(heap, HEAP_NO_SERIALIZE | HEAP_ZERO_MEMORY, 300000 * sizeof(int));
//    cout << "-adress = " << hex << mm << ", size = " << dec << 300000 << " \n\n";
//
//    HeapInfo(heap);
//}








// GetProcessHeap().Эта функция возвращает дескриптор кучи(heap) текущего процесса.

//HeapCreate:
//
//Назначение: Создает новую кучу в виртуальном адресном пространстве вызывающего процесса.Куча предоставляет динамически выделяемую память, которую можно использовать для хранения данных во время выполнения программы.
//
//Параметры :
//
//    HEAP_NO_SERIALIZE : Указывает, что куча не должна синхронизироваться для многопоточных операций.
//    HEAP_ZERO_MEMORY : Указывает, что при создании кучи все ее содержимое должно быть инициализировано нулями.
//    4096 : Размер начальной коммитированной области кучи в байтах.В данном случае 4096 байт, что соответствует размеру страницы в большинстве систем.
//    0 : Зарезервированный параметр(в данном случае не используется).
//    Возвращаемое значение : Дескриптор новой кучи.Если функция не удалась, возвращает NULL.


//HeapWalk:
//
//Назначение: Используется для перебора всех блоков в куче, предоставляя информацию о каждом блоке.
//
//Параметры :
//
//    pheap : Дескриптор кучи, для которой выполняется проход.
//    & phe : Указатель на структуру PROCESS_HEAP_ENTRY, которая будет заполняться информацией о каждом блоке.
//    Возвращаемое значение : TRUE при успешном проходе, FALSE при ошибке.



//<< ((phe.wFlags & PROCESS_HEAP_REGION) ? " R" : "") // начало непрерывной области
//<< ((phe.wFlags & PROCESS_HEAP_UNCOMMITTED_RANGE) ? " U" : "") // нераспределенная область
//<< ((phe.wFlags & PROCESS_HEAP_ENTRY_BUSY) ? " B" : "") // распределенная область
//Этот фрагмент кода проверяет флаги для каждого блока в куче и выводит соответствующую информацию.
//PROCESS_HEAP_REGION: Флаг, указывающий на начало непрерывной области.
//PROCESS_HEAP_UNCOMMITTED_RANGE : Флаг, указывающий на нераспределенную область.
//PROCESS_HEAP_ENTRY_BUSY : Флаг, указывающий на распределенную область(занятую).



//HeapAlloc:
//
//Назначение: Выделяет блок памяти из кучи.
//
//Параметры :
//
//    heap : Дескриптор кучи, из которой выделяется память.
//    HEAP_NO_SERIALIZE : Указывает, что операция не должна синхронизироваться для многопоточных операций.
//    HEAP_ZERO_MEMORY : Указывает, что выделенная память должна быть инициализирована нулями.
//    300000 * sizeof(int) : Размер выделяемого блока в байтах.
//    Возвращаемое значение : Указатель на начало выделенной области памяти.Если функция не удалась, возвращает NULL.



//Распределенная область(PROCESS_HEAP_ENTRY_BUSY) :
//
//    Это область, которая занята и используется приложением для хранения данных.
//    Когда происходит выделение памяти с помощью HeapAlloc или аналогичной функции, область считается распределенной, и она является частью выделенной пользователю памяти.
//    Нераспределенная область(PROCESS_HEAP_UNCOMMITTED_RANGE) :
//
//    нераспределенной - Это область, которая зарезервирована для потенциального выделения в будущем, но в настоящее время не выделена.
//    Когда вы резервируете память, но ее не инициализируете(например, при создании кучи с флагом HEAP_RESERVE), она считается нераспределенной.
//    Нераспределенная область может быть распределена(сделана доступной) позже при необходимости.
//    Непрерывная область(PROCESS_HEAP_REGION) :
//
//    Это флаг, указывающий на начало непрерывной области в куче.
//    Непрерывная область - это участок памяти, который был выделен кучей и может содержать несколько блоков.