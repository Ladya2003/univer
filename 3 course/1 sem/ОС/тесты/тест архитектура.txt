Выбери один правильный ответ
﻿Все элементы такого ядра работают в едином адресном формате. Определённой структуры данные операционной системы не имеют:
Микроядро
Модульное ядро
Монолитное ядро
Наноядро
Экзоядро

 
Правильный ответ:
Монолитное ядро.

В монолитных ядрах все сервисы (драйверы устройств, менеджер памяти, файловая система и т. д.) работают в одном адресном пространстве ядра.




User
﻿
Такое ядро предоставляет только возможность взаимного обмена между процессами и надёжного распределения и высвобождения ресурсов.
Микроядро
Модульное ядро
Монолитное ядро
Наноядро
Экзоядро
 
Правильный ответ:
Микроядро.

Микроядро предоставляет минимальный набор функций (взаимодействие между процессами, планирование и некоторые другие базовые функции), а большая часть функциональности ОС выполняется в пользовательском режиме.




User
﻿
Такое ядро решает лишь проблему обработки аппаратного прерывания программы, которое генерируют различные блоки компьютера.
Микроядро
Модульное ядро
Монолитное ядро
Наноядро
Экзоядро
 
Правильный ответ:
Наноядро.

Наноядро минимализирует функциональность, предоставляемую внутри ядра, и в частности фокусируется на обработке прерываний.




User
﻿
Практически все драйверы и элементы распределены в процессах сервиса. Часто нет возможности загрузки расширительных модулей в такое ядро.
Микроядро
Модульное ядро
Монолитное ядро
Наноядро
Экзоядро
 
Правильный ответ:
Микроядро.

В микроядерных системах большинство драйверов и сервисов работает в пользовательском режиме, а не в режиме ядра. Это уменьшает функциональность, выполняемую самим ядром, делая систему более модульной и изолированной.




User
﻿
Что будет выведено в выходной поток после выполнения следующего фрагмента кода на C++ (будет работать на Visual Studio 2017 и новее)? int x=0b10111 & 0b11001;
printf("%x\n", x);
1
11
31
0b11111
0b10001
10001
 
Для начала разберемся с бинарной операцией:

markdown
Copy code
0b10111 
&
0b11001
-------
0b10001
Теперь конвертируем 0b10001 в шестнадцатеричную систему счисления:

0b10001 в двоичной системе равно 17 в десятичной, что соответствует 11 в шестнадцатеричной системе.

Поэтому правильный ответ:
11.




User
﻿
Что будет выведено в выходной поток после выполнения следующего фрагмента кода на C++ (будет работать на Visual Studio 2017 и новее)? int x=0x123& 0x310;
printf("%x\n", x);
100
333
433
123310
 
Для начала выполним побитовую операцию AND:

yaml
Copy code
0x123 в шестнадцатеричной системе равно:
  1 0010 0011 в двоичной системе

0x310 в шестнадцатеричной системе равно:
  1 1000 0000 в двоичной системе
Применим побитовую операцию AND:

yaml
Copy code
  1 0010 0011
&
  1 1000 0000
--------------
  1 0000 0000
Результат 1 0000 0000 в двоичной системе равен 0x100 в шестнадцатеричной системе.

Поэтому правильный ответ:
100.




User
﻿
С помощью какой битовой маски можно обнулить 10-й бит в целом числе, считая самый младший бит нулевым?
0xFF7F
0xF7FF
0xFAFF
0xFBFF
0xFEFF
0xFFBF
 
Если самый младший бит является нулевым, тогда 10-й бит будет следующим:

yaml
Copy code
0b0000 0000 0000 0100 0000
(Это 1, сдвинутая на 10 позиций влево.)

Чтобы обнулить этот бит, нам нужно применить побитовую операцию И с инвертированной маской этого бита.

Инвертированная маска:

yaml
Copy code
0b1111 1111 1111 1011 1111
Это равно 0xFFBF в шестнадцатеричной системе.

Поэтому правильный ответ:
0xFFBF.




User
﻿
Какие базовые функции ОС выполняют модули ядра? Отметьте ТРИ варианта.
антивирусная защита
управление процессами
дефрагментация диска
управление памятью
управление устройствами ввода-вывода
 
Три базовые функции ОС, которые выполняют модули ядра:

Управление процессами
Управление памятью
Управление устройствами ввода-вывода.



User
﻿
Можно ли в ядре Linux использовать операции с плавающей точкой? Выберите лучший ответ.
Запрещено
Не запрещено, но вызовет исключение
Можно с версии ядра 5.0
Можно с соблюдением мер предосторожности, но не рекомендуется
Можно без ограничений
 
Лучший ответ:

Можно с соблюдением мер предосторожности, но не рекомендуется.

Объяснение:
Операции с плавающей точкой могут быть использованы в ядре Linux, но их использование не рекомендуется из-за ряда комплексных проблем, связанных с сохранением и восстановлением состояния FPU (блок плавающей точки). Если разработчик решит использовать операции с плавающей точкой в ядре, он должен самостоятельно управлять сохранением и восстановлением состояния FPU. Но на практике лучше избегать использования операций с плавающей точкой в коде ядра.




User
﻿
Что произойдет с объектом ядра, если запросивший его процесс аварийно завершился, не освободив этот объект ядра?
Объект останется заблокирован до перезагрузки операционной системы
Объект останется "сиротой" (orphan)
Объект останется заблокирован до очередного сбора мусора
Объект будет немедленно и безусловно удален
Объект будет удален, если его не используют другие пользователи
 
Лучший ответ:

Объект будет удален, если его не используют другие пользователи.

Объяснение:
Операционные системы, в том числе основанные на ядре Linux, предоставляют механизмы для отслеживания использования ресурсов. Если процесс завершается, система будет освобождать ресурсы, связанные с этим процессом. Если объект ядра используется только завершенным процессом, он будет освобожден. Если он используется другими процессами, то он останется доступным до тех пор, пока последний пользователь не освободит его.




User
﻿
С помощью какой функции следует получать описатель объекта ядра типа File, если планируется выполнять только операции чтения данных из файла?
CreateFile
CreateRoFile
OpenFile
OpenRoFile
 
Лучший ответ:

CreateFile

Объяснение:
В Windows API функция CreateFile используется как для создания, так и для открытия файла. Параметры этой функции позволяют указать режим доступа (например, только для чтения). Название "CreateFile" может быть вводящим в заблуждение, так как эта функция также может открывать существующие файлы. Если вы планируете выполнять только операции чтения данных из файла, вы можете установить флаг доступа как GENERIC_READ при вызове функции CreateFile.




User
﻿
Все ли описатели объектов ядра можно закрыть с помощью функции CloseHandle?
да 
нет
 
Да.

Объяснение:
Функция CloseHandle в Windows API используется для закрытия дескрипторов (или описателей) объектов ядра. Это включает в себя файлы, именованные и анонимные каналы, семафоры, события и другие типы объектов ядра.




User
﻿
Какое программное обеспечение имеет графический пользовательский интерфейс?
BIOS
HAL
UEFI
 
UEFI.

Объяснение:
UEFI (Unified Extensible Firmware Interface) - это современный стандарт программного обеспечения для инициализации компьютерной системы, который пришел на замену устаревшему BIOS. UEFI может иметь графический пользовательский интерфейс (GUI), что делает его более дружелюбным для пользователя, чем традиционные текстовые интерфейсы BIOS.

HAL (Hardware Abstraction Layer) - это слой абстракции аппаратного обеспечения, который предоставляет стандартный интерфейс между ОС и аппаратным обеспечением компьютера. HAL не имеет графического интерфейса.

BIOS (Basic Input/Output System) - это программное обеспечение, предназначенное для начальной инициализации аппаратного обеспечения компьютера при его включении. Большинство BIOS имеют текстовый пользовательский интерфейс.




User
﻿
В какой папке 64-хразрядные версии Windows хранят 32-хразрядные библиотеки?
System
System32
System64
SysWOW64
WinSxS
 
В 64-х разрядных версиях Windows 32-х разрядные библиотеки хранятся в папке SysWOW64.




User
﻿
В какой папке 64-хразрядные версии Windows хранят 64-хразрядные библиотеки?
System
System32
System64
SysWOW64
WinSxS
 
В 64-х разрядных версиях Windows 64-х разрядные библиотеки хранятся в папке System32.